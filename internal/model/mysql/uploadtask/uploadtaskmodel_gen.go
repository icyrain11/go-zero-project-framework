// Code generated by goctl. DO NOT EDIT.

package uploadtask

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	uploadTaskFieldNames          = builder.RawFieldNames(&UploadTask{})
	uploadTaskRows                = strings.Join(uploadTaskFieldNames, ",")
	uploadTaskRowsExpectAutoSet   = strings.Join(stringx.Remove(uploadTaskFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	uploadTaskRowsWithPlaceHolder = strings.Join(stringx.Remove(uploadTaskFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	uploadTaskModel interface {
		Insert(ctx context.Context, data *UploadTask) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UploadTask, error)
		Update(ctx context.Context, data *UploadTask) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUploadTaskModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UploadTask struct {
		Id        int64         `db:"id"` // 主键id
		UserId    int64         `db:"user_id"`
		FileAddr  string        `db:"file_addr"`
		ExpiredAt sql.NullInt64 `db:"expired_at"` // 过期时间
		CreatedAt sql.NullTime  `db:"created_at"`
		UpdatedAt sql.NullTime  `db:"updated_at"`
		DeletedAt sql.NullTime  `db:"deleted_at"`
	}
)

func newUploadTaskModel(conn sqlx.SqlConn) *defaultUploadTaskModel {
	return &defaultUploadTaskModel{
		conn:  conn,
		table: "`upload_task`",
	}
}

func (m *defaultUploadTaskModel) withSession(session sqlx.Session) *defaultUploadTaskModel {
	return &defaultUploadTaskModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`upload_task`",
	}
}

func (m *defaultUploadTaskModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUploadTaskModel) FindOne(ctx context.Context, id int64) (*UploadTask, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", uploadTaskRows, m.table)
	var resp UploadTask
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUploadTaskModel) Insert(ctx context.Context, data *UploadTask) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, uploadTaskRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.FileAddr, data.ExpiredAt, data.DeletedAt)
	return ret, err
}

func (m *defaultUploadTaskModel) Update(ctx context.Context, data *UploadTask) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, uploadTaskRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.FileAddr, data.ExpiredAt, data.DeletedAt, data.Id)
	return err
}

func (m *defaultUploadTaskModel) tableName() string {
	return m.table
}
